- hosts: localhost
  connection: local
  gather_facts: False

  tasks:

    - include_vars: vars/secrets.yml
    - include_vars: vars/main.yml

    - name: Create security group
      ec2_group:
          aws_access_key: "{{ ec2_access_key }}"
          aws_secret_key: "{{ ec2_secret_key }}"
          vpc_id: "{{ aws_vpc_id }}"
          name: "{{ aws_instnce_name }}_security_group"
          description: "{{ aws_instnce_name }} security group"
          region: "{{ aws_region }}"
          rules:
              - proto: tcp
                from_port: 22
                to_port: 22
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 8888
                to_port: 8888
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 8080
                to_port: 8080
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 8081
                to_port: 8081
                cidr_ip: 0.0.0.0/0
          rules_egress:
              - proto: all
                cidr_ip: 0.0.0.0/0
      register: sec_group

    - name: Provision a set of instances
      ec2:
         aws_access_key: "{{ ec2_access_key }}"
         aws_secret_key: "{{ ec2_secret_key }}"
         key_name: "{{ aws_keypair }}"
         group_id: "{{ sec_group.group_id }}"
         instance_type: "{{ aws_instance_type }}"
         image: "{{ aws_image_id }}"
         wait: true
         wait_timeout: "{{ 500 }}"
         instance_tags:
           Name:  "{{ aws_instnce_name }}"
         exact_count: 1
         count_tag:
           Name: "{{ aws_instnce_name }}"
         vpc_subnet_id: "{{ aws_vpc_subnet_id }}"
         assign_public_ip: yes
         region: "{{ aws_region }}"
      register: ec2

    - name: Wait for SSH to come up
      local_action: wait_for
                    host={{ item.public_ip }}
                    port=22
                    state=started
      with_items: "{{ ec2.instances }}"

    - name: add the host to inventory
      add_host:
        name: "{{ item.public_ip }}"
        groups: just_created
      with_items: "{{ ec2.instances }}"

- hosts: just_created
  remote_user: ec2-user
  sudo: yes

  tasks:

    - name: install docker-py
      pip:
        name: docker-py

    - name: Copy the install Docker script
      copy:
        src: ../roles/vars/docker_install.sh
        dest: /home/ec2-user/docker_install.sh
        mode: 0555
        force: no

    - name: install Docker
      command: sh /home/ec2-user/docker_install.sh
      become: true
      become_user: root

